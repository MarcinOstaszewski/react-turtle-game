{"version":3,"sources":["containers/Tortoise/Tortoise.module.css","containers/Scene/Scene.module.css","components/Start/Start.module.css","components/GameOver/GameOver.module.css","sounds/Broke_For_Free_-_10_-_Covered_In_Oil.mp3","sounds/135936__bradwesson__collectcoin__CC.mp3","sounds/hit_01_made_from_Impact_gravier_by_Julien_Nicolas_.mp3","sounds/hit_02_made_from_Impact_gravier_by_Julien_Nicolas_.mp3","sounds/hit_03_made_from_Impact_gravier_by_Julien_Nicolas_.mp3","sounds/Andy_Rhode_342750__rhodesmas__coins-purchase-4_attribution.mp3","components/Start/Start.js","components/GameOver/GameOver.js","containers/Scene/Scene.js","helperFunctions.js","containers/Tortoise/Tortoise.js","assetsImports.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Start","props","id","styles","start","className","btn","onClick","changeGameState","class","sounds","GameOver","gameover","score","scene","displayScore","healthBar","healthBarStyle","width","health","left","backgroundColor","legend","gameState","localStorage","healthbar","style","topBar","setPlayerPosition","top","hVelocity","vVelocity","setPlayerRotation","rotation","rot","verifyBounce","tempVal","consts","bounceFactor","tortoiseSize","scrWidth","scrHeight","horizontalVelocity","verticalVelocity","values","topBarHeight","Math","abs","parseInt","checkObjectsCollisions","s1","x1","y1","star","s2","size","dx","dy","sqrt","checkVerticalCollisions","obst","height","getRandomNumBetweenExcluding","min1","max1","min2","max2","getRandomNumBetween","placeStar","i","that","tortoise","tmpLeft","tmpTop","x","y","setState","state","stars","starsArr","map","item","hSpeed","random","vSpeed","bgColor","starColors","length","starsCount","starInterval","window","setInterval","moveStar","bind","frameLength","parseFloat","j","calculateVelocityAndRotation","obj","maxRotation","Object","assign","rotationVelocity","flapsMoving","keysPressed","flap","moving","key","transform","sign","speed","min","max","floor","createObstacles","arr","t","l","h","countAnimatedPoints","addToScore","bonusScore","pointsAnimated","forEach","push","reduce","total","healedPoints","arrayOfPoints","heal","fontSize","setObstaclesPositions","obstaclesInfo","innerWidth","innerHeight","a","obstaclesAddressesArray","maxStarsCount","maxVelocity","Tortoise","obstaclesArr","leftFlap","rightFlap","head","resetThisState","rearRightTransform","rearLeftTransform","healthChange","update","cos","PI","sin","clearInterval","maxObstaclesNum","fs","colorValues","color","filter","updateHealth","this","onresize","checkWindowSize","interval","prevProps","prevState","healthChangeIndicator","healthIndicator","obstacles","obstacle","bonus","join","rear","Component","bgmusic","UIfx","volume","collectSound","healSound","hit01Sound","hit02Sound","hit03Sound","App","windowInnerWidth","windowInnerHeight","add","console","log","play","obstaclesVisible","change","text","newState","document","onkeyup","e","keys","onkeydown","Scene","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4e80041.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"healthIndicator\":\"Tortoise_healthIndicator__3k7Oo\",\"Tortoise\":\"Tortoise_Tortoise__1nBSv\",\"head\":\"Tortoise_head__1FJP6\",\"flap\":\"Tortoise_flap__3RIpl\",\"left\":\"Tortoise_left__uA1V7\",\"rear\":\"Tortoise_rear__1iV6f\",\"star\":\"Tortoise_star__62GPc\",\"obstacle\":\"Tortoise_obstacle__3e4Wz\",\"flickering\":\"Tortoise_flickering__8x6Fu\",\"pointsAnimated\":\"Tortoise_pointsAnimated__FtVsB\",\"display\":\"Tortoise_display__KIebZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scene\":\"Scene_scene__2Gm2R\",\"healthbar\":\"Scene_healthbar__3T-gd\",\"topBar\":\"Scene_topBar__1Peni\",\"score\":\"Scene_score__3sezF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start\":\"Start_start__KWVfT\",\"btn\":\"Start_btn__tZCI2\",\"sounds\":\"Start_sounds__2BeZx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameover\":\"GameOver_gameover__1Rc89\",\"btn\":\"GameOver_btn__S8gyv\"};","module.exports = __webpack_public_path__ + \"static/media/Broke_For_Free_-_10_-_Covered_In_Oil.bcc7bc12.mp3\";","module.exports = __webpack_public_path__ + \"static/media/135936__bradwesson__collectcoin__CC.6a1ea324.mp3\";","module.exports = __webpack_public_path__ + \"static/media/hit_01_made_from_Impact_gravier_by_Julien_Nicolas_.388e5542.mp3\";","module.exports = __webpack_public_path__ + \"static/media/hit_02_made_from_Impact_gravier_by_Julien_Nicolas_.7926626a.mp3\";","module.exports = __webpack_public_path__ + \"static/media/hit_03_made_from_Impact_gravier_by_Julien_Nicolas_.6bcc1995.mp3\";","module.exports = __webpack_public_path__ + \"static/media/Andy_Rhode_342750__rhodesmas__coins-purchase-4_attribution.e25a2716.mp3\";","import React from 'react';\r\nimport styles from './Start.module.css'\r\n\r\nconst Start = (props) => {\r\n    \r\n    return ( \r\n        <div id={styles.start}>\r\n            <div>Collect the circles for points.</div>\r\n            <div>Brighter circles give more points.</div>\r\n            <div>The greater is your's and circle's speed the more you score.</div>\r\n            <div>Collisions with walls and obstacles hurt you.</div>\r\n            <div>Red circles heal you or give more points.</div>\r\n            <div>Use <strong>w, s, a, d</strong> keys.</div>\r\n            <div className={styles.btn}\r\n                onClick={ () => props.changeGameState('game') }\r\n            >START</div>\r\n            <div class={styles.sounds}>\r\n                <p>Music: </p>\r\n                <p>\"Covered In Oil\" by Broke For Free @freemusicarchive.org</p>\r\n                <p>Sounds:</p>\r\n                <p>bradwesson, Julien Nicolas, Andy Rhode @freesounds.com</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Start;","import React from 'react';\r\nimport styles from './GameOver.module.css'\r\n\r\nconst GameOver = (props) => {\r\n    return ( \r\n        <div id={styles.gameover}>\r\n            <h2>GAME OVER</h2>\r\n            <h3>Your score:</h3>\r\n            <h1>{props.score}</h1>\r\n            <div className={styles.btn}\r\n                onClick={ () => props.changeGameState('start') }\r\n            >RESTART</div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GameOver;","import React from 'react';\r\n\r\nimport styles from './Scene.module.css';\r\n\r\nimport Start from '../../components/Start/Start';\r\nimport GameOver from '../../components/GameOver/GameOver';\r\n\r\nconst scene = (props) => {\r\n    let healthBarStyle = {\r\n        width: (props.width * props.health / 200 ),\r\n        left: (props.width / 2 - (props.width * props.health / 400)),\r\n        backgroundColor: `hsl(${props.health}, 70%, 35%)`\r\n    }\r\n    let displayScore;\r\n    let healthBar;\r\n    let legend = '';\r\n\r\n    if (props.gameState === 'start') {\r\n        legend = <Start changeGameState={props.changeGameState} />\r\n        displayScore = <div className={styles.score}>Hiscore: <span id=\"score\">{localStorage['hiscore'] || 0}</span></div>\r\n        \r\n    } else if (props.gameState === 'game') {\r\n        healthBar = <div id={styles.healthbar} style={healthBarStyle}></div> ;\r\n        displayScore = <div className={styles.score}>Score: <span id=\"score\">{props.score}</span></div>\r\n\r\n    } else if (props.gameState === 'over') {\r\n        legend = <GameOver \r\n            score={props.score}\r\n            changeGameState={props.changeGameState}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div id={styles.scene} style={props}></div>\r\n            <div id={styles.topBar} ></div>\r\n            { healthBar }\r\n            { displayScore }\r\n            { legend }\r\n        </div> \r\n    );\r\n}\r\n \r\nexport default scene;","\r\nlet setPlayerPosition = (left, top, hVelocity, vVelocity) => {\r\n    return {\r\n        left: (left + vVelocity),\r\n        top: (top + hVelocity)\r\n    }\r\n}\r\n\r\nlet setPlayerRotation = (rotation) => {\r\n    let rot = 0 + (rotation % 360);\r\n    if (rotation < -180) { rot = rotation + 360 }\r\n    return rot;\r\n}\r\n\r\nlet verifyBounce = (tempVal, consts, props) => {\r\n    let { left, top, health } = tempVal;\r\n    let { bounceFactor, tortoiseSize } = consts;\r\n    let { scrWidth, scrHeight } = props;\r\n    let hVelocity = tempVal.horizontalVelocity;\r\n    let vVelocity = tempVal.verticalVelocity;\r\n    let values = {\r\n        horizontalVelocity: hVelocity,\r\n        verticalVelocity: vVelocity,\r\n        health: health\r\n    }\r\n    \r\n    if (top + hVelocity > scrHeight - tortoiseSize / 2 || top + hVelocity < consts.topBarHeight + tortoiseSize / 2) {\r\n        values.health -= Math.abs(parseInt(values.horizontalVelocity));\r\n        values.horizontalVelocity *= bounceFactor;\r\n    }\r\n    if (left + vVelocity > scrWidth - tortoiseSize / 2 || left + vVelocity < 0 + tortoiseSize / 2) {\r\n        values.health -= Math.abs(parseInt(values.verticalVelocity));\r\n        values.verticalVelocity *= bounceFactor;\r\n    }\r\n\r\n    return values;\r\n}\r\n\r\nlet checkObjectsCollisions = (s1, x1, y1, star) => {\r\n    let s2 = star.size;\r\n    let x2 = star.left;\r\n    let y2 = star.top;\r\n    let dx = x1 - x2;\r\n    let dy = y1 - y2;\r\n    let dist = Math.sqrt(dx * dx + dy * dy);\r\n    return dist < (s1 + s2) * 0.7 ? true : false;\r\n}\r\n\r\nlet checkVerticalCollisions = (size, left, top, obst) => {\r\n    if (top - size / 2 > obst.top && top + size / 2 < obst.top + obst.height) { // is between the top and bottom of obstacle?\r\n        if ( obst.left > left - size / 2 && obst.left < left + size / 2 ) { // is \"touchin\" an obstacle?\r\n            return true\r\n        }\r\n    } else return false\r\n}\r\n\r\nlet getRandomNumBetweenExcluding = (min1, max1, min2, max2) => {\r\n    return getRandomNumBetween(1, 2) === 1 ? getRandomNumBetween(min1, max1) : getRandomNumBetween(min2, max2)\r\n}\r\n\r\nlet placeStar = (i, that, size) => {\r\n    let tortoise = that;\r\n    let tmpLeft = tortoise.left || tortoise.props.scrWidth / 2;\r\n    let tmpTop = tortoise.top || tortoise.props.scrHeight / 2;\r\n    if (tmpLeft < size || tmpLeft > tortoise.props.scrWidth - size) tmpLeft = tortoise.props.scrWidth / 2\r\n    if (tmpTop < size || tmpTop > tortoise.props.scrHeight - size) tmpTop = tortoise.props.scrHeight / 2\r\n    let x = getRandomNumBetweenExcluding(size * 2, tmpLeft - size * 2, \r\n        tmpLeft + size * 2, tortoise.props.scrWidth - size * 2);\r\n    let y = getRandomNumBetweenExcluding(size * 2 + consts.topBarHeight, tmpTop - size * 2,\r\n        tmpTop + size * 2, tortoise.props.scrHeight - size * 2);\r\n    tortoise.setState(state => {\r\n        let stars = state.starsArr.map(item => item);\r\n        stars[i] = {\r\n            size: 20,\r\n            hSpeed: Math.random() * 4 - 2,\r\n            vSpeed: Math.random() * 4 - 2,\r\n            left: x,\r\n            top: y,\r\n            bgColor: getRandomNumBetween(0, consts.starColors.length - 1)\r\n        };\r\n        return {starsArr: stars};\r\n    })\r\n    ++tortoise.starsCount;\r\n    tortoise.starInterval[i] = window.setInterval(moveStar.bind(null, i, tortoise), tortoise.props.frameLength);\r\n}\r\n\r\nlet moveStar = (i, that) => {\r\n    let tortoise = that\r\n    let star = tortoise.state.starsArr[i];\r\n    let left = parseFloat(star.left);\r\n    let top = parseFloat(star.top);\r\n    let hSpeed = star.hSpeed;\r\n    let vSpeed = star.vSpeed;\r\n    if (left + star.hSpeed <= 0) {\r\n        hSpeed = 0 - star.hSpeed;\r\n    }\r\n    if (left + star.hSpeed > tortoise.props.scrWidth - star.size) {\r\n        hSpeed = 0 - star.hSpeed;\r\n    }\r\n    if (top + star.vSpeed < consts.topBarHeight) {\r\n        vSpeed = 0 - star.vSpeed;\r\n    }\r\n    if (top + star.vSpeed > tortoise.props.scrHeight - star.size) {\r\n        vSpeed = 0 - star.vSpeed;\r\n    }\r\n    tortoise.setState(state => {\r\n        const stars = state.starsArr.map((item, j) => {\r\n            if (j === i) {\r\n                return {\r\n                    ...item,\r\n                    left: (left + hSpeed),\r\n                    top: (top + vSpeed),\r\n                    vSpeed: vSpeed,\r\n                    hSpeed: hSpeed,\r\n                }\r\n            } else { return item }\r\n        })\r\n\r\n        return { starsArr: stars }\r\n    })\r\n}\r\n\r\nlet calculateVelocityAndRotation = (obj, maxRotation) => {\r\n    let values = Object.assign({}, {...obj})\r\n    if (Math.abs(values.verticalVelocity) > 0.01) {\r\n        values.verticalVelocity = values.verticalVelocity * 0.97; // gradually slows down speed\r\n    } else {\r\n        values.verticalVelocity = 0; // stops\r\n    }\r\n    if (Math.abs(values.horizontalVelocity) > 0.01) {\r\n        values.horizontalVelocity = values.horizontalVelocity * 0.97;\r\n    } else {\r\n        values.horizontalVelocity = 0;\r\n    }\r\n    if (values.rotationVelocity > maxRotation) { \r\n        values.rotationVelocity = maxRotation; // rotation cannot exceed max...\r\n    } else if (values.rotationVelocity < -maxRotation) { \r\n        values.rotationVelocity = -maxRotation; // ... nor -max\r\n    } else {\r\n        if (Math.abs(values.rotationVelocity) > 0.1) {\r\n            values.rotationVelocity *= 0.97; // slowing down rotation\r\n        } else {\r\n            values.rotationVelocity = 0;\r\n        }\r\n    }\r\n    return {\r\n        rotation: values.rotation,\r\n        verticalVelocity: values.verticalVelocity,\r\n        horizontalVelocity: values.horizontalVelocity\r\n    }\r\n}\r\n\r\nlet flapsMoving = (obj, keysPressed) => {\r\n    let flap = Object.assign({}, {...obj})\r\n    if (flap.moving === 0) {\r\n        if (keysPressed[flap.key]) {\r\n            return {\r\n                transform: 'rotate(' + (flap.sign ? '-' : '') + '20deg)',\r\n                moving: 60,\r\n                speed: 1.3\r\n            }\r\n        } else return {}\r\n    } else if (flap.moving === 30) { // flap starts to return\r\n        return {\r\n            transform: 'rotate(' + (flap.sign ? '-' : '') + '80deg)',\r\n            moving: --flap.moving,\r\n            speed: 0\r\n        }\r\n    } else if (flap.moving <= 60 && flap.moving > 0) {\r\n        return {\r\n            moving: --flap.moving,\r\n            speed: (flap.moving > 55)  ?  flap.speed * 1.15  :  flap.speed * 0.97,\r\n        }\r\n    }\r\n}\r\n\r\nlet getRandomNumBetween = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nlet createObstacles = (arr) => {\r\n    return arr.map(item => {\r\n        return {\r\n            top: item.t,\r\n            left: item.l,\r\n            height: item.h\r\n        };\r\n    })\r\n}\r\nlet countAnimatedPoints = (tempVal, star, starColors, addToScore ) => {\r\n    let bonusScore = 0;\r\n    if (tempVal.pointsAnimated.length) { // if animated points visible...\r\n        let arr = [];\r\n        tempVal.pointsAnimated.forEach(item=> arr.push(item.score))\r\n        bonusScore = arr.reduce((total, score) => total + score, 0)// ...adds them as bonus points\r\n    }\r\n    let healedPoints = 0;\r\n    let score = parseInt(Math.abs(tempVal.horizontalVelocity) + Math.abs(tempVal.verticalVelocity) + Math.abs(star.hSpeed) + Math.abs(star.vSpeed)) + (starColors.length - star.bgColor) + bonusScore;\r\n    if (star.bgColor < 3) {\r\n        if (tempVal.health < 100) {\r\n            healedPoints = 4 * star.bgColor - 12\r\n            tempVal.health -= healedPoints; // heals \r\n            score = 0;\r\n        } else {\r\n            score *= 2 // OR multiples score when 100% healthy\r\n            addToScore(score); \r\n        }\r\n    } else {\r\n        addToScore(score); // OR just scores\r\n    }\r\n    let arrayOfPoints = [...tempVal.pointsAnimated]\r\n    if (score > 0) {\r\n        arrayOfPoints.push({\r\n            score: score,\r\n            bonusScore: bonusScore,\r\n            heal: healedPoints,\r\n            style: {\r\n                left: star.left,\r\n                top: star.top,\r\n                fontSize: 60,\r\n            }\r\n        })\r\n    }\r\n    return arrayOfPoints;\r\n}\r\n\r\nlet setObstaclesPositions = (obstaclesInfo) => {\r\n    let scrWidth = window.innerWidth;\r\n    let scrHeight = window.innerHeight;\r\n    \r\n    let ret = obstaclesInfo.map( a => ({\r\n        'l': scrWidth / a[0] * a[1],\r\n        't': scrHeight / a[2] * a[3], \r\n        'h': scrHeight / a[4], \r\n    }))\r\n    return ret\r\n}\r\n\r\nconst obstaclesInfo = [[4,1,4,1,4],[6,4,6,1,6],[5,4,4,3,6],[2,1,3,2,8],[9,8,3,1,6],[5,1,12,8,5],[12,1,8,1,7]\r\n    ,[14,5,4,3,5],[9,7,6,1,4],[2,1,29,3,5],[3,2,9,5,4],[23,2,23,15,3],[48,17,5,1,5]]\r\n\r\nconst consts = {\r\n    starColors: ['#EF5757', '#e67474', '#DE9079', '#C5DE79', '#C0DA74', '#ADC668', '#9AB15D', '#869D51', '#738846', '#60743A'], //  '#263717'   ////  , '#4D602E' , '#3A4B23', '#354e1f'\r\n    obstaclesAddressesArray: setObstaclesPositions(obstaclesInfo),\r\n    maxStarsCount: 3,\r\n    bounceFactor: -0.33,\r\n    maxVelocity: 0.35,\r\n    maxRotation: 2.5,\r\n    tortoiseSize: 35,\r\n    topBarHeight: 40,\r\n}\r\n\r\n\r\nexport {\r\n    setPlayerPosition, \r\n    setPlayerRotation, \r\n    verifyBounce,\r\n    checkObjectsCollisions,\r\n    checkVerticalCollisions,\r\n    placeStar,\r\n    calculateVelocityAndRotation,\r\n    flapsMoving,\r\n    getRandomNumBetween,\r\n    createObstacles,\r\n    countAnimatedPoints,\r\n    setObstaclesPositions,\r\n    obstaclesInfo,\r\n    consts\r\n}","import React, { Component } from 'react';\r\nimport styles from './Tortoise.module.css';\r\n\r\nimport {\r\n    setPlayerPosition,\r\n    setPlayerRotation,\r\n    verifyBounce,\r\n    checkObjectsCollisions,\r\n    checkVerticalCollisions,\r\n    placeStar,\r\n    calculateVelocityAndRotation,\r\n    flapsMoving,\r\n    createObstacles,\r\n    countAnimatedPoints,\r\n    setObstaclesPositions,\r\n    obstaclesInfo,\r\n    consts\r\n} from '../../helperFunctions';\r\n\r\nclass Tortoise extends Component {\r\n    state = {\r\n        starsArr: [],\r\n        obstaclesArr: createObstacles(consts.obstaclesAddressesArray, consts.topBarHeight, this.props.scrWidth, this.props.scrHeight),\r\n        leftFlap: {\r\n            transform: '',\r\n        },\r\n        rightFlap: {\r\n            transform: '',\r\n        },\r\n        head: '-10px',\r\n        rotationVelocity: 0,\r\n    }\r\n    starInterval = [];\r\n\r\n    tmOut;\r\n\r\n    resetThisState = () => {\r\n        this.setState({\r\n            rearRightTransform: '',\r\n            rearLeftTransform: '',\r\n            left: this.props.scrWidth / 2, // tortoise horiz. position\r\n            top: this.props.scrHeight / 2, // tortoise vert. position\r\n            rotation: 0,\r\n            horizontalVelocity: 0,\r\n            verticalVelocity: 0,\r\n            health: this.props.health,\r\n            pointsAnimated: [],\r\n            leftFlap: {\r\n                moving: 0,\r\n                speed: 0,\r\n                transform: '',\r\n                sign: 0,\r\n                key: 'a'\r\n            },\r\n            rightFlap: {\r\n                moving: 0,\r\n                speed: 0,\r\n                transform: '',\r\n                sign: 1,\r\n                key: 'd'\r\n            },\r\n            head: '-10px',\r\n            rotationVelocity: 0, \r\n            healthChange: 0\r\n        })\r\n    }\r\n\r\n    update = () => {\r\n        if (this.props.gameState === 'game') {\r\n            let tempVal = {\r\n                leftFlap: {...this.state.leftFlap},\r\n                rightFlap: {...this.state.rightFlap},\r\n                rearLeftTransform: \"rotate(-20deg)\", // starting position\r\n                rearRightTransform: \"rotate(20deg)\",\r\n                top: this.state.top,\r\n                left: this.state.left,\r\n                rotation: this.state.rotation + 0,\r\n                rotationVelocity: this.state.rotationVelocity,\r\n                head: '-10px',\r\n                health: this.state.health,\r\n                pointsAnimated: this.state.pointsAnimated,\r\n                healthChange: 0\r\n            }\r\n\r\n            Object.assign(tempVal.leftFlap, flapsMoving(tempVal.leftFlap, this.props.keysPressed)) // overwrite in tempVal variables for flap(s)\r\n            Object.assign(tempVal.rightFlap, flapsMoving(tempVal.rightFlap, this.props.keysPressed))\r\n            \r\n            tempVal.rotation = tempVal.rotation + tempVal.leftFlap.speed - tempVal.rightFlap.speed;\r\n\r\n            tempVal.horizontalVelocity = this.state.horizontalVelocity - (consts.maxVelocity * (tempVal.leftFlap.speed + tempVal.rightFlap.speed) / 4) * Math.cos(this.state.rotation * Math.PI / 180);\r\n            tempVal.verticalVelocity = this.state.verticalVelocity + (consts.maxVelocity * (tempVal.leftFlap.speed + tempVal.rightFlap.speed) / 4) * Math.sin(this.state.rotation * Math.PI / 180);\r\n            \r\n            if (this.props.keysPressed['s']) {\r\n                tempVal.rearRightTransform = \"rotate(-40deg)\";\r\n                tempVal.rearLeftTransform = \"rotate(40deg)\";\r\n                tempVal.horizontalVelocity = 0.97 * tempVal.horizontalVelocity;\r\n                tempVal.verticalVelocity = 0.97 * tempVal.verticalVelocity;\r\n            }\r\n            Object.assign(tempVal, calculateVelocityAndRotation(tempVal, consts.maxRotation));\r\n\r\n            for (let i = 0; i < this.state.starsArr.length; i++) {\r\n                let star = this.state.starsArr[i];\r\n                if (checkObjectsCollisions(\r\n                    consts.tortoiseSize, tempVal.left, tempVal.top,  // tortoise\r\n                    star // star\r\n                )) {\r\n                    tempVal.pointsAnimated = countAnimatedPoints(tempVal, star, consts.starColors, this.props.addToScore)\r\n                    window.clearInterval(this.starInterval[i]);\r\n                    placeStar(i, this, consts.tortoiseSize)\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < this.props.maxObstaclesNum; i++) { // state.obstaclesArr.length\r\n                if (checkVerticalCollisions(consts.tortoiseSize, tempVal.left, tempVal.top, this.state.obstaclesArr[i])) {\r\n                    tempVal.health -= 1;\r\n                }\r\n            }\r\n\r\n            if (this.props.keysPressed['w']) { \r\n                tempVal.head = '-20px'; \r\n                tempVal.horizontalVelocity *= 1.005;\r\n                tempVal.verticalVelocity *= 1.005;\r\n            }\r\n\r\n            Object.assign(tempVal, verifyBounce(tempVal, consts, this.props));\r\n            Object.assign(tempVal, setPlayerPosition(tempVal.left, tempVal.top, tempVal.horizontalVelocity, tempVal.verticalVelocity));\r\n            Object.assign(tempVal, setPlayerRotation(tempVal.rotation));\r\n\r\n            let healthChange;\r\n            if (this.state.health) {\r\n                healthChange = this.state.health - tempVal.health\r\n            }\r\n\r\n            if (tempVal.pointsAnimated) {\r\n                tempVal.pointsAnimated = tempVal.pointsAnimated.map( item => {\r\n                    let fs = item.style.fontSize;\r\n                    let colorValues = '36, 91, 150,'\r\n                    if (item.heal) { colorValues = '68, 152, 27,' }\r\n                    if (fs < 300) {\r\n                        return {\r\n                            ...item,\r\n                            style: {\r\n                                ...item.style,\r\n                                fontSize: (fs + 2),\r\n                                color: `rgba(${colorValues} 0.${999 - fs * 3})`\r\n                            }\r\n                        }\r\n                    } else return ''\r\n                }).filter(item => item !== '')\r\n            }\r\n\r\n            if (healthChange && healthChange !== 0) {\r\n                tempVal.healthChange = healthChange;\r\n                this.props.updateHealth(healthChange)\r\n            }\r\n            this.setState({...tempVal})\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetThisState();\r\n        window.onresize = () => {\r\n            this.props.checkWindowSize();\r\n            consts.obstaclesAddressesArray = setObstaclesPositions(obstaclesInfo);\r\n            this.setState({obstaclesArr: createObstacles(consts.obstaclesAddressesArray, consts.topBarHeight, this.props.scrWidth, this.props.scrHeight)})\r\n        }\r\n        this.interval = window.setInterval(this.update, this.props.frameLength);\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.gameState === 'start' && this.props.gameState === 'game') {\r\n            this.resetThisState();\r\n        }\r\n        if (this.state.starsArr.length < consts.maxStarsCount) {\r\n            placeStar(this.state.starsArr.length, this, consts.tortoiseSize);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.interval);\r\n        window.clearInterval(this.starInterval);\r\n    }\r\n\r\n    render() { \r\n        let healthChangeIndicator;\r\n        if (this.state.healthChange !== 0 && this.state.top) {\r\n            let bgColor = this.state.healthChange > 0 ? '#e338' : '#3f38';\r\n            healthChangeIndicator = <div id={styles.healthIndicator}\r\n                style={{\r\n                    backgroundColor: bgColor,\r\n                    top: this.state.top - consts.tortoiseSize,\r\n                    left: this.state.left - consts.tortoiseSize\r\n                }}\r\n            />\r\n        }\r\n\r\n        let stars = this.state.starsArr.map((item, i) => \r\n            <div className={styles.star} key={i}\r\n                style={{\r\n                    left: item.left,\r\n                    top: item.top,\r\n                    backgroundColor: consts.starColors[item.bgColor]\r\n                }}>\r\n            </div>\r\n        )\r\n        let obstacles = [];\r\n        for (let i = 0; i < this.props.maxObstaclesNum; i++) {\r\n            let item = this.state.obstaclesArr[i];\r\n            obstacles.push(\r\n                <div className={styles.obstacle} key={i}\r\n                style={{\r\n                    left: item.left,\r\n                    top: item.top,\r\n                    height: item.height\r\n                }}/>\r\n            )\r\n        } \r\n        let pointsAnimated = '';\r\n        if (this.state.pointsAnimated) {\r\n            pointsAnimated = this.state.pointsAnimated.map((item,i) => {\r\n                let bonus = item.bonusScore === 0 ? '' : `+${item.bonusScore}`\r\n                return <div className={styles.pointsAnimated} key={i} style={item.style}>{item.score}{bonus}</div> \r\n            })\r\n        }\r\n\r\n        return ( \r\n            <div>\r\n                { stars }\r\n                { healthChangeIndicator }\r\n                <div id={styles.Tortoise} \r\n                    style = {{\r\n                        left: this.state.left,\r\n                        top: this.state.top,\r\n                        transform: `translate(-50%, -50%) rotate(${this.state.rotation}deg)`\r\n                }}>\r\n                    <div className={styles.head} \r\n                        style={{top: this.state.head}}>\r\n                    </div>\r\n                    <div className={styles.flap} \r\n                        style={{transform: this.state.rightFlap.transform}}>\r\n                    </div>\r\n                    <div className={[styles.flap, styles.left].join(' ')} \r\n                        style={{transform: this.state.leftFlap.transform}}>\r\n                    </div>\r\n                    <div className={styles.rear} style={{transform: this.state.rearRightTransform}}></div>\r\n                    <div className={[styles.rear, styles.left].join(' ')} style={{transform: this.state.rearLeftTransform}}></div>\r\n                </div>\r\n                { obstacles }\r\n                { pointsAnimated }\r\n            </div>\r\n         );\r\n        }\r\n    }\r\n\r\nexport default Tortoise;","import UIfx from 'uifx';\r\nimport bgmusic from '../src/sounds/Broke_For_Free_-_10_-_Covered_In_Oil.mp3';\r\nimport collectSound from '../src/sounds/135936__bradwesson__collectcoin__CC.mp3'\r\nimport hit01Sound from '../src/sounds/hit_01_made_from_Impact_gravier_by_Julien_Nicolas_.mp3'\r\nimport hit02Sound from '../src/sounds/hit_02_made_from_Impact_gravier_by_Julien_Nicolas_.mp3'\r\nimport hit03Sound from '../src/sounds/hit_03_made_from_Impact_gravier_by_Julien_Nicolas_.mp3'\r\nimport healSound from '../src/sounds/Andy_Rhode_342750__rhodesmas__coins-purchase-4_attribution.mp3'\r\n\r\nconst sounds = {\r\n    bgmusic: new UIfx(bgmusic, {volume: 0.05}),\r\n    collectSound: new UIfx(collectSound, {volume: 0.5}),\r\n    healSound: new UIfx(healSound, {volume: 0.75}),\r\n    hit01Sound: new UIfx(hit01Sound, {volume: 0.75}),\r\n    hit02Sound: new UIfx(hit02Sound, {volume: 0.75}),\r\n    hit03Sound: new UIfx(hit03Sound, {volume: 0.75}),\r\n}\r\n\r\nexport { sounds };","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Scene from './containers/Scene/Scene';\r\nimport Tortoise from './containers/Tortoise/Tortoise';\r\nimport { obstaclesInfo } from './helperFunctions';\r\nimport { sounds } from '../src/assetsImports';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight,\r\n    gameState: 'start'\r\n  }\r\n  frameLength = 16;\r\n  \r\n  resetThisState = () => {\r\n    this.setState({\r\n      rotation: 0,\r\n      keysPressed: {},\r\n      score: 0,\r\n      health: 100,\r\n      maxObstaclesNum: obstaclesInfo.length,\r\n    })\r\n  }\r\n\r\n  checkWindowSize = () => {\r\n    this.setState({\r\n      windowInnerWidth: window.innerWidth,\r\n      windowInnerHeight: window.innerHeight\r\n    })\r\n  }\r\n\r\n  addToScore = (add) => {\r\n    console.log(add)\r\n    sounds.collectSound.play()\r\n    let obstaclesVisible = Math.floor((this.state.score + add) / 50);\r\n    if (obstaclesVisible > 13) obstaclesVisible = 13;\r\n    this.setState({ \r\n      score: this.state.score + add,\r\n      maxObstaclesNum: obstaclesVisible\r\n    })\r\n  }\r\n\r\n  updateHealth = (change) => {\r\n    if (this.state.health - change >= 100) {\r\n      this.setState({\r\n        health: 100,\r\n      })\r\n    } else if (this.state.health - change * 2 > 0) {\r\n      if (change < 0) {\r\n        sounds.healSound.play() \r\n      } else {\r\n        if (change > 3) {\r\n          sounds.hit03Sound.play();\r\n        } else if (change > 2) {\r\n          sounds.hit02Sound.play();\r\n        } else {\r\n          sounds.hit01Sound.play();\r\n        }\r\n      }\r\n      this.setState({\r\n        health: this.state.health - change * 2,\r\n      })\r\n    } else {\r\n      this.changeGameState('over')\r\n    }\r\n  }\r\n\r\n  changeGameState = (text) => {\r\n    let newState = {\r\n      gameState: text\r\n    }\r\n    if (text === 'game') {\r\n      Object.assign(newState, {\r\n        rotation: 0,\r\n        keysPressed: {},\r\n        score: 0,\r\n        health: 100,\r\n        maxObstaclesNum: 0,\r\n      })\r\n    }\r\n    if (text === 'over') { localStorage['hiscore'] = Math.max(this.state.score, localStorage['hiscore']) }\r\n    this.setState({ ...newState })\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetThisState();\r\n    document.onkeyup = (e) => {\r\n      const keys = {...this.state.keysPressed};\r\n      delete keys[e.key];\r\n      this.setState({ keysPressed: keys })\r\n    }\r\n    document.onkeydown = (e) => {\r\n      const keys = {\r\n        ...this.state.keysPressed,\r\n        [e.key]: 1\r\n      }\r\n      this.setState({ keysPressed: keys })\r\n    }\r\n    sounds.bgmusic.play();\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <div>\r\n        <Scene width={this.state.windowInnerWidth}\r\n          height={this.state.windowInnerHeight}\r\n          backgroundColor=\"#132f4c\"\r\n          health={this.state.health}\r\n          score={this.state.score}\r\n          gameState={this.state.gameState}\r\n          changeGameState={this.changeGameState}\r\n        />\r\n        <Tortoise scrWidth={this.state.windowInnerWidth}\r\n          scrHeight={this.state.windowInnerHeight}\r\n          rotation={this.state.rotation}\r\n          keysPressed={this.state.keysPressed}\r\n          frameLength={this.frameLength}\r\n          checkWindowSize={this.checkWindowSize}\r\n          addToScore={this.addToScore}\r\n          updateHealth={this.updateHealth}\r\n          health={this.state.health}\r\n          maxObstaclesNum={this.state.maxObstaclesNum}\r\n          gameState={this.state.gameState}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}