{"version":3,"sources":["containers/Tortoise/Tortoise.module.css","containers/Scene/Scene.module.css","components/Start/Start.module.css","components/GameOver/GameOver.module.css","components/Start/Start.js","components/GameOver/GameOver.js","containers/Scene/Scene.js","helperFunctions.js","containers/Tortoise/Tortoise.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Start","props","id","styles","start","className","btn","onClick","changeGameState","GameOver","console","log","gameover","score","scene","displayScore","healthBar","healthBarStyle","width","health","left","backgroundColor","legend","gameState","localStorage","healthbar","style","topBar","setPlayerPosition","top","hVelocity","vVelocity","setPlayerRotation","rotation","rot","verifyBounce","tempVal","consts","bounceFactor","tortoiseSize","scrWidth","scrHeight","horizontalVelocity","verticalVelocity","values","Math","abs","parseInt","topBarHeight","checkCollisions","s1","x1","y1","star","s2","size","dx","slice","dy","sqrt","placeStar","i","that","tortoise","x","floor","random","y","setState","state","stars","starsArr","map","item","hSpeed","vSpeed","bgColor","getRandomNumBetween","starColors","length","starsCount","starInterval","window","setInterval","moveStar","bind","frameLength","parseFloat","j","calculateVelocityAndRotation","obj","maxRotation","Object","assign","rotationVelocity","flapsMoving","keysPressed","flap","moving","key","transform","sign","speed","min","max","halfHeight","innerHeight","halfWidth","innerWidth","obstaclesAddressesArray","t","l","maxStarsCount","maxVelocity","Tortoise","obstaclesArr","leftFlap","rightFlap","head","resetThisState","rearRightTransform","rearLeftTransform","pointsAnimated","update","healthChange","cos","PI","sin","healedPoints","addToScore","heal","fontSize","clearInterval","fs","colorValues","color","filter","updateHealth","this","onresize","checkWindowSize","interval","prevProps","prevState","join","rear","Component","App","windowInnerWidth","windowInnerHeight","add","change","text","newState","document","onkeyup","e","keys","onkeydown","Scene","height","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.275a7162.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tortoise\":\"Tortoise_Tortoise__1nBSv\",\"head\":\"Tortoise_head__1FJP6\",\"flap\":\"Tortoise_flap__3RIpl\",\"left\":\"Tortoise_left__uA1V7\",\"rear\":\"Tortoise_rear__1iV6f\",\"star\":\"Tortoise_star__62GPc\",\"obstacle\":\"Tortoise_obstacle__3e4Wz\",\"pointsAnimated\":\"Tortoise_pointsAnimated__FtVsB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"scene\":\"Scene_scene__2Gm2R\",\"healthbar\":\"Scene_healthbar__3T-gd\",\"topBar\":\"Scene_topBar__1Peni\",\"score\":\"Scene_score__3sezF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"start\":\"Start_start__KWVfT\",\"btn\":\"Start_btn__tZCI2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameover\":\"GameOver_gameover__1Rc89\",\"btn\":\"GameOver_btn__S8gyv\"};","import React from 'react';\r\nimport styles from './Start.module.css'\r\n\r\nconst Start = (props) => {\r\n    \r\n    return ( \r\n        <div id={styles.start}>\r\n            <div>Catch the circles for points.</div>\r\n            <div>Brighter circles give more points.</div>\r\n            <div>The greater is your's and circle's speed the more you score.</div>\r\n            <div>Collisions at high speed hurt you.</div>\r\n            <div>Red circles heal you.</div>\r\n            <div>Use <strong>w, s, a, d</strong> keys.</div>\r\n            <div className={styles.btn}\r\n                onClick={ () => props.changeGameState('game') }\r\n            >START</div>\r\n\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Start;","import React from 'react';\r\nimport styles from './GameOver.module.css'\r\n\r\nconst GameOver = (props) => {\r\n    console.log(props)\r\n    return ( \r\n        <div id={styles.gameover}>\r\n            <h2>GAME OVER</h2>\r\n            <p>Your score: {props.score}</p>\r\n            <div className={styles.btn}\r\n                onClick={ () => props.changeGameState('start') }\r\n            >RESTART</div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default GameOver;","import React from 'react';\r\n\r\nimport styles from './Scene.module.css';\r\n\r\nimport Start from '../../components/Start/Start';\r\nimport GameOver from '../../components/GameOver/GameOver';\r\n\r\nconst scene = (props) => {\r\n\r\n    let healthBarStyle = {\r\n        width: (props.width * props.health / 200 ) + 'px',\r\n        left: (props.width / 2 - (props.width * props.health / 400)) + 'px',\r\n        backgroundColor: `hsl(${props.health}, 70%, 35%)`\r\n    }\r\n    let displayScore;\r\n    let healthBar;\r\n    let legend = '';\r\n\r\n    if (props.gameState === 'start') {\r\n        legend = <Start changeGameState={props.changeGameState} />\r\n        displayScore = <div className={styles.score}>Hiscore: <span id=\"score\">{localStorage['hiscore'] || 0}</span></div>\r\n        \r\n    } else if (props.gameState === 'game') {\r\n        healthBar = <div id={styles.healthbar} style={healthBarStyle}></div> ;\r\n        displayScore = <div className={styles.score}>Score: <span id=\"score\">{props.score}</span></div>\r\n\r\n    } else if (props.gameState === 'over') {\r\n\r\n        legend = <GameOver \r\n            score={props.score}\r\n            changeGameState={props.changeGameState}/>\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <div id={styles.scene} style={props}></div>\r\n            <div id={styles.topBar} ></div>\r\n            { healthBar }\r\n            { displayScore }\r\n            { legend }\r\n        </div> \r\n    );\r\n\r\n}\r\n \r\nexport default scene;","\r\nlet setPlayerPosition = (left, top, hVelocity, vVelocity) => {\r\n    return {\r\n        left: (left + vVelocity) + \"px\",\r\n        top: (top + hVelocity) + \"px\"\r\n    }\r\n}\r\n\r\nlet setPlayerRotation = (rotation) => {\r\n    let rot = 0 + (rotation % 360);\r\n    if (rotation < -180) { rot = rotation + 360 }\r\n    return rot;\r\n}\r\n\r\nlet verifyBounce = (tempVal, consts, props) => {\r\n    let { left, top, health } = tempVal;\r\n    let { bounceFactor, tortoiseSize } = consts;\r\n    let { scrWidth, scrHeight } = props;\r\n    let hVelocity = tempVal.horizontalVelocity;\r\n    let vVelocity = tempVal.verticalVelocity;\r\n    let values = {\r\n        horizontalVelocity: hVelocity,\r\n        verticalVelocity: vVelocity,\r\n        health: health\r\n    }\r\n    \r\n    if (top + hVelocity > scrHeight - tortoiseSize) {\r\n        values.health -= Math.abs(parseInt(values.horizontalVelocity));\r\n        values.horizontalVelocity *= bounceFactor;\r\n    }\r\n    if (left + vVelocity > scrWidth - tortoiseSize) {\r\n        values.health -= Math.abs(parseInt(values.verticalVelocity));\r\n        values.verticalVelocity *= bounceFactor;\r\n    }\r\n    if (top + hVelocity < consts.topBarHeight) {\r\n        values.health -= Math.abs(parseInt(values.horizontalVelocity));\r\n        values.horizontalVelocity *= bounceFactor;\r\n    }\r\n    if (left + vVelocity < 0) {\r\n        values.health -= Math.abs(parseInt(values.verticalVelocity));\r\n        values.verticalVelocity *= bounceFactor;\r\n    }\r\n\r\n    return values;\r\n}\r\n\r\nlet checkCollisions = (s1, x1, y1, star) => {\r\n    let s2 = star.size;\r\n    let x2 = parseInt(star.left.slice(0, -2));\r\n    let y2 = parseInt(star.top.slice(0, -2));\r\n    let dx = x1 - x2;\r\n    let dy = y1 - y2;\r\n    let dist = Math.sqrt(dx * dx + dy * dy);\r\n    return dist < (s1 + s2) * 0.7 ? true : false;\r\n}\r\n\r\nlet placeStar = (i, that) => {\r\n    let tortoise = that;\r\n    let x = Math.floor(Math.random() * (tortoise.props.scrWidth - 80) + 40);\r\n    let y = Math.floor(Math.random() * (tortoise.props.scrHeight - 80) + 40);\r\n    tortoise.setState(state => {\r\n        let stars = state.starsArr.map(item => item);\r\n        stars[i] = {\r\n            size: 20,\r\n            hSpeed: Math.random() * 4 - 2,\r\n            vSpeed: Math.random() * 4 - 2,\r\n            left: x + 'px',\r\n            top: y + 'px',\r\n            bgColor: getRandomNumBetween(0, consts.starColors.length)\r\n        };\r\n        return {starsArr: stars};\r\n    })\r\n    ++tortoise.starsCount;\r\n    tortoise.starInterval[i] = window.setInterval(moveStar.bind(null, i, tortoise), tortoise.props.frameLength);\r\n}\r\n\r\nlet moveStar = (i, that) => {\r\n    let tortoise = that\r\n    let star = tortoise.state.starsArr[i];\r\n    let left = parseFloat(star.left);\r\n    let top = parseFloat(star.top);\r\n    // let transform = parseInt(star.transform) + star.rotationVelocity;\r\n    let hSpeed = star.hSpeed;\r\n    let vSpeed = star.vSpeed;\r\n    if (left + star.hSpeed <= 0) {\r\n        hSpeed = 0 - star.hSpeed;\r\n    }\r\n    if (left + star.hSpeed > tortoise.props.scrWidth - star.size) {\r\n        hSpeed = 0 - star.hSpeed;\r\n    }\r\n    if (top + star.vSpeed < consts.topBarHeight) {\r\n        vSpeed = 0 - star.vSpeed;\r\n    }\r\n    if (top + star.vSpeed > tortoise.props.scrHeight - star.size) {\r\n        vSpeed = 0 - star.vSpeed;\r\n    }\r\n    tortoise.setState(state => {\r\n        const stars = state.starsArr.map((item, j) => {\r\n            if (j === i) {\r\n                return {\r\n                    ...item,\r\n                    left: (left + hSpeed) + 'px',\r\n                    top: (top + vSpeed) + 'px',\r\n                    vSpeed: vSpeed,\r\n                    hSpeed: hSpeed,\r\n                    // transform: transform\r\n                }\r\n            } else { return item }\r\n        })\r\n\r\n        return { starsArr: stars }\r\n    })\r\n}\r\n\r\nlet calculateVelocityAndRotation = (obj, maxRotation) => {\r\n    let values = Object.assign({}, {...obj})\r\n    if (Math.abs(values.verticalVelocity) > 0.01) {\r\n        values.verticalVelocity = values.verticalVelocity * 0.97; // gradually slows down speed\r\n    } else {\r\n        values.verticalVelocity = 0; // stops\r\n    }\r\n    if (Math.abs(values.horizontalVelocity) > 0.01) {\r\n        values.horizontalVelocity = values.horizontalVelocity * 0.97;\r\n    } else {\r\n        values.horizontalVelocity = 0;\r\n    }\r\n    if (values.rotationVelocity > maxRotation) { \r\n        values.rotationVelocity = maxRotation; // rotation cannot exceed max...\r\n    } else if (values.rotationVelocity < -maxRotation) { \r\n        values.rotationVelocity = -maxRotation; // ... nor -max\r\n    } else {\r\n        if (Math.abs(values.rotationVelocity) > 0.1) {\r\n            values.rotationVelocity *= 0.97; // slowing down rotation\r\n        } else {\r\n            values.rotationVelocity = 0;\r\n        }\r\n    }\r\n    return {\r\n        rotation: values.rotation,\r\n        verticalVelocity: values.verticalVelocity,\r\n        horizontalVelocity: values.horizontalVelocity\r\n    }\r\n}\r\n\r\nlet flapsMoving = (obj, keysPressed) => {\r\n    let flap = Object.assign({}, {...obj})\r\n    if (flap.moving === 0) {\r\n        if (keysPressed[flap.key]) {\r\n            return {\r\n                transform: 'rotate(' + (flap.sign ? '-' : '') + '20deg)',\r\n                moving: 60,\r\n                speed: 1.3\r\n            }\r\n        } else return {}\r\n    } else if (flap.moving === 30) { // flap starts to return\r\n        return {\r\n            transform: 'rotate(' + (flap.sign ? '-' : '') + '80deg)',\r\n            moving: --flap.moving,\r\n            speed: 0\r\n        }\r\n    } else if (flap.moving <= 60 && flap.moving > 0) {\r\n        return {\r\n            moving: --flap.moving,\r\n            speed: (flap.moving > 55)  ?  flap.speed * 1.15  :  flap.speed * 0.97,\r\n        }\r\n    }\r\n}\r\n\r\nlet getRandomNumBetween = (min, max) => {\r\n    return Math.floor(Math.random() * max - min) + min;\r\n}\r\n\r\nconst halfHeight = parseInt(window.innerHeight / 2);\r\nconst halfWidth = parseInt(window.innerWidth / 2);\r\n\r\nlet createObstacles = (arr, topBarHeight, halfWidth, halfHeight) => {\r\n    return arr.map(item => {\r\n        console.log(getRandomNumBetween(topBarHeight, halfHeight / 2))\r\n        return {\r\n            top: getRandomNumBetween(topBarHeight, halfHeight / 2) + item.t,\r\n            left: getRandomNumBetween(halfWidth / 2, 3 * halfWidth / 2) + item.l,\r\n            height: halfHeight / 4 // 2 - item.t\r\n        };\r\n    })\r\n}\r\n\r\nconst consts = {\r\n    starColors: ['#EF5757', '#e67474', '#DE9079', '#C5DE79', '#C0DA74', '#ADC668', '#9AB15D', '#869D51', '#738846', '#60743A'], //  '#263717'   ////  , '#4D602E' , '#3A4B23', '#354e1f'\r\n    obstaclesAddressesArray: [{\r\n        t: 0,\r\n        l: 0\r\n    }, {\r\n        t: halfHeight /2,\r\n        l: 0\r\n    }, {\r\n        t: 0,\r\n        l: halfWidth / 2\r\n    }, {\r\n        t: halfHeight /2,\r\n        l: halfWidth /2\r\n    }],\r\n    maxStarsCount: 3,\r\n    bounceFactor: -0.33,\r\n    maxVelocity: 0.35,\r\n    maxRotation: 2.5,\r\n    tortoiseSize: 35,\r\n    topBarHeight: 40,\r\n}\r\n\r\n\r\nexport {\r\n    setPlayerPosition, \r\n    setPlayerRotation, \r\n    verifyBounce,\r\n    checkCollisions,\r\n    placeStar,\r\n    calculateVelocityAndRotation,\r\n    flapsMoving,\r\n    getRandomNumBetween,\r\n    createObstacles,\r\n    consts\r\n}","import React, { Component } from 'react';\r\nimport styles from './Tortoise.module.css'\r\nimport {\r\n    setPlayerPosition,\r\n    setPlayerRotation,\r\n    verifyBounce,\r\n    checkCollisions,\r\n    placeStar,\r\n    calculateVelocityAndRotation,\r\n    flapsMoving,\r\n    // createObstacles,\r\n    consts\r\n} from '../../helperFunctions';\r\n\r\nclass Tortoise extends Component {\r\n    state = {\r\n        starsArr: [],\r\n        obstaclesArr: [], \r\n        // createObstacles(consts.obstaclesAddressesArray, consts.topBarHeight, this.props.scrWidth, this.props.scrHeight),\r\n        leftFlap: {\r\n            transform: '',\r\n        },\r\n        rightFlap: {\r\n            transform: '',\r\n        },\r\n        head: '-10px',\r\n        rotationVelocity: 0,\r\n    }\r\n    starInterval = [];\r\n    tmOut;\r\n\r\n    resetThisState = () => {\r\n        this.setState({\r\n            rearRightTransform: '',\r\n            rearLeftTransform: '',\r\n            left: this.props.scrWidth / 2 + 'px', // tortoise horiz. position\r\n            top: this.props.scrHeight / 2 + 'px', // tortoise vert. position\r\n            rotation: 0,\r\n            horizontalVelocity: 0,\r\n            verticalVelocity: 0,\r\n            health: this.props.health,\r\n            pointsAnimated: [],\r\n            leftFlap: {\r\n                moving: 0,\r\n                speed: 0,\r\n                transform: '',\r\n                sign: 0,\r\n                key: 'a'\r\n            },\r\n            rightFlap: {\r\n                moving: 0,\r\n                speed: 0,\r\n                transform: '',\r\n                sign: 1,\r\n                key: 'd'\r\n            },\r\n            head: '-10px',\r\n            rotationVelocity: 0, \r\n        })\r\n    }\r\n\r\n    update = () => {\r\n        if (this.props.gameState === 'game') {\r\n            let tempVal = {\r\n                leftFlap: {...this.state.leftFlap},\r\n                rightFlap: {...this.state.rightFlap},\r\n                rearLeftTransform: \"rotate(-20deg)\", // starting position\r\n                rearRightTransform: \"rotate(20deg)\",\r\n                top: parseFloat(this.state.top),\r\n                left: parseFloat(this.state.left),\r\n                rotation: this.state.rotation + 0,\r\n                rotationVelocity: this.state.rotationVelocity,\r\n                head: '-10px',\r\n                health: this.state.health,\r\n                pointsAnimated: this.state.pointsAnimated,\r\n            }\r\n\r\n            Object.assign(tempVal.leftFlap, flapsMoving(tempVal.leftFlap, this.props.keysPressed)) // overwrite in tempVal variables for flap(s)\r\n            Object.assign(tempVal.rightFlap, flapsMoving(tempVal.rightFlap, this.props.keysPressed))\r\n            \r\n            tempVal.rotation = tempVal.rotation + tempVal.leftFlap.speed - tempVal.rightFlap.speed;\r\n\r\n            tempVal.horizontalVelocity = this.state.horizontalVelocity - (consts.maxVelocity * (tempVal.leftFlap.speed + tempVal.rightFlap.speed) / 4) * Math.cos(this.state.rotation * Math.PI / 180);\r\n            tempVal.verticalVelocity = this.state.verticalVelocity + (consts.maxVelocity * (tempVal.leftFlap.speed + tempVal.rightFlap.speed) / 4) * Math.sin(this.state.rotation * Math.PI / 180);\r\n            \r\n            if (this.props.keysPressed['s']) {\r\n                tempVal.rearRightTransform = \"rotate(-40deg)\";\r\n                tempVal.rearLeftTransform = \"rotate(40deg)\";\r\n                tempVal.horizontalVelocity = 0.97 * tempVal.horizontalVelocity;\r\n                tempVal.verticalVelocity = 0.97 * tempVal.verticalVelocity;\r\n            }\r\n            Object.assign(tempVal, calculateVelocityAndRotation(tempVal, consts.maxRotation));\r\n\r\n            for (let i = 0; i < this.state.starsArr.length; i++) {\r\n                let star = this.state.starsArr[i];\r\n                if (checkCollisions(\r\n                    consts.tortoiseSize, tempVal.left, tempVal.top,  // tortoise\r\n                    star // star\r\n                )) {\r\n                    let healedPoints = 0;\r\n                    let score = parseInt(Math.abs(tempVal.horizontalVelocity) + Math.abs(tempVal.verticalVelocity) + Math.abs(star.hSpeed) + Math.abs(star.vSpeed)) + (consts.starColors.length - star.bgColor);\r\n                    if (star.bgColor < 3) {\r\n                        if (tempVal.health < 100) {\r\n                            healedPoints = 4 * star.bgColor - 12\r\n                            tempVal.health -= healedPoints; // heals \r\n                            score = 0;\r\n                        } else {\r\n                            this.props.addToScore(score * 2); // OR multiples score when 100% healthy\r\n                        }\r\n                    } else {\r\n                        this.props.addToScore(score); // OR just scores\r\n                    }\r\n\r\n                    tempVal.pointsAnimated = [\r\n                        ...tempVal.pointsAnimated,\r\n                        {\r\n                            score: score,\r\n                            heal: healedPoints,\r\n                            style: {\r\n                                left: `${parseInt(star.left.slice(0, -2))}px`,\r\n                                top: `${parseInt(star.top.slice(0, -2))}px`,\r\n                                fontSize: 60 + 'px',\r\n                            }\r\n                        }\r\n                    ]\r\n\r\n                    window.clearInterval(this.starInterval[i]);\r\n                    placeStar(i, this)\r\n                }\r\n            }\r\n\r\n            if (this.props.keysPressed['w']) { \r\n                tempVal.head = '-20px'; \r\n                tempVal.horizontalVelocity *= 1.005;\r\n                tempVal.verticalVelocity *= 1.005;\r\n            }\r\n\r\n            Object.assign(tempVal, verifyBounce(tempVal, consts, this.props));\r\n            Object.assign(tempVal, setPlayerPosition(tempVal.left, tempVal.top, tempVal.horizontalVelocity, tempVal.verticalVelocity));\r\n            Object.assign(tempVal, setPlayerRotation(tempVal.rotation));\r\n\r\n            let healthChange;\r\n            if (this.state.health) {\r\n                healthChange = this.state.health - tempVal.health\r\n            }\r\n\r\n            if (tempVal.pointsAnimated) {\r\n                tempVal.pointsAnimated = tempVal.pointsAnimated.map( item => {\r\n                    let fs = parseInt(item.style.fontSize);\r\n                    console.log(item.heal, item.score)\r\n                    let colorValues = '36, 91, 150,'\r\n                    if (item.heal) { colorValues = '68, 152, 27,' }\r\n                    if (fs < 300) {\r\n                        return {\r\n                            ...item,\r\n                            style: {\r\n                                ...item.style,\r\n                                fontSize: (fs + 2) + 'px',\r\n                                color: `rgba(${colorValues} 0.${999 - fs * 3})`\r\n                            }\r\n                        }\r\n                    } else return ''\r\n                }).filter(item =>{\r\n                    return item !== '';\r\n                })\r\n\r\n            }\r\n\r\n            this.setState({...tempVal})\r\n            if (healthChange && healthChange !== 0) {\r\n                this.props.updateHealth(healthChange)\r\n            }\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.resetThisState();\r\n        window.onresize = () => this.props.checkWindowSize();\r\n        this.interval = window.setInterval(this.update, this.props.frameLength);\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevProps.gameState === 'start' && this.props.gameState === 'game') {\r\n            this.setState({\r\n                rotation: 0,\r\n                left: this.props.scrWidth / 2 + 'px', \r\n                top: this.props.scrHeight / 2 + 'px',\r\n                horizontalVelocity: 0,\r\n                verticalVelocity: 0,\r\n            })\r\n        }\r\n        if (this.state.starsArr.length < consts.maxStarsCount) {\r\n            placeStar(this.state.starsArr.length, this);\r\n        }\r\n    }\r\n    componentWillUnmount() {\r\n        window.clearInterval(this.interval);\r\n        window.clearInterval(this.starInterval);\r\n    }\r\n\r\n    render() { \r\n        let stars = this.state.starsArr.map((item, i) => \r\n            <div className={styles.star} key={i}\r\n                style={{\r\n                    left: item.left,\r\n                    top: item.top,\r\n                    backgroundColor: consts.starColors[item.bgColor]\r\n                }}>\r\n            </div>\r\n        )\r\n        // let obstacles = this.state.obstaclesArr.map((item,i) =>\r\n        //     <div className={styles.obstacle} key={i}\r\n        //         style={{\r\n        //             left: item.left,\r\n        //             top: item.top,\r\n        //             height: item.height\r\n        //         }}>\r\n        //     </div>\r\n        // )\r\n                        // { obstacles }\r\n        let pointsAnimated = '';\r\n        if (this.state.pointsAnimated) {\r\n            pointsAnimated = this.state.pointsAnimated.map((item,i) => {\r\n                console.log(item)\r\n                return <div className={styles.pointsAnimated} key={i} style={item.style}>{item.score}</div> \r\n            })\r\n        }\r\n\r\n        return ( \r\n            <div>\r\n                { stars }\r\n                <div id={styles.Tortoise} \r\n                    style = {{\r\n                        left: this.state.left,\r\n                        top: this.state.top,\r\n                        transform: `rotate(${this.state.rotation}deg)`\r\n                }}>\r\n                    <div className={styles.head} \r\n                        style={{top: this.state.head}}>\r\n                    </div>\r\n                    <div className={styles.flap} \r\n                        style={{transform: this.state.rightFlap.transform}}>\r\n                    </div>\r\n                    <div className={[styles.flap, styles.left].join(' ')} \r\n                        style={{transform: this.state.leftFlap.transform}}>\r\n                    </div>\r\n                    <div className={styles.rear} style={{transform: this.state.rearRightTransform}}></div>\r\n                    <div className={[styles.rear, styles.left].join(' ')} style={{transform: this.state.rearLeftTransform}}></div>\r\n                </div>\r\n                { pointsAnimated }\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Tortoise;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Scene from './containers/Scene/Scene';\r\nimport Tortoise from './containers/Tortoise/Tortoise';\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    windowInnerWidth: window.innerWidth,\r\n    windowInnerHeight: window.innerHeight,\r\n    rotation: 0,\r\n    keysPressed: {},\r\n    score: 0,\r\n    health: 100,\r\n    gameState: 'start'\r\n  }\r\n  frameLength = 16;\r\n\r\n  checkWindowSize = () => {\r\n    this.setState({\r\n      windowInnerWidth: window.innerWidth,\r\n      windowInnerHeight: window.innerHeight\r\n    })\r\n  }\r\n\r\n  addToScore = (add) => {\r\n    this.setState({ score: this.state.score + add })\r\n  }\r\n\r\n  updateHealth = (change) => {\r\n    if (this.state.health - change >= 100) {\r\n      this.setState({\r\n        health: 100\r\n      })\r\n    } else if (this.state.health - change * 2 > 0) {\r\n      this.setState({\r\n        health: this.state.health - change * 2,\r\n      })\r\n    } else {\r\n      this.changeGameState('over')\r\n    }\r\n  }\r\n\r\n  changeGameState = (text) => {\r\n    let newState = {\r\n      gameState: text\r\n    }\r\n    if (text === 'game') {\r\n      Object.assign(newState, {\r\n        rotation: 0,\r\n        keysPressed: {},\r\n        score: 0,\r\n        health: 100,\r\n      })\r\n    }\r\n    if (text === 'over') { localStorage['hiscore'] = Math.max(this.state.score, localStorage['hiscore']) }\r\n    this.setState({ ...newState })\r\n  }\r\n\r\n  componentDidMount() {\r\n    document.onkeyup = (e) => {\r\n      const keys = {...this.state.keysPressed};\r\n      delete keys[e.key];\r\n      this.setState({ keysPressed: keys })\r\n    }\r\n    document.onkeydown = (e) => {\r\n      const keys = {\r\n        ...this.state.keysPressed,\r\n        [e.key]: 1\r\n      }\r\n      this.setState({ keysPressed: keys })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return ( \r\n      <div>\r\n        <Scene width={this.state.windowInnerWidth}\r\n          height={this.state.windowInnerHeight}\r\n          backgroundColor=\"#132f4c\"\r\n          health={this.state.health}\r\n          score={this.state.score}\r\n          gameState={this.state.gameState}\r\n          changeGameState={this.changeGameState}\r\n        />\r\n        <Tortoise scrWidth={this.state.windowInnerWidth}\r\n          scrHeight={this.state.windowInnerHeight}\r\n          rotation={this.state.rotation}\r\n          keysPressed={this.state.keysPressed}\r\n          frameLength={this.frameLength}\r\n          checkWindowSize={this.checkWindowSize}\r\n          addToScore={this.addToScore}\r\n          updateHealth={this.updateHealth}\r\n          health={this.state.health}\r\n          gameState={this.state.gameState}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}